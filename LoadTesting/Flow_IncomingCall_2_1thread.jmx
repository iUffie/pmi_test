<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="6.0.0-SNAPSHOT 09c3f81">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="1_Lead_Insert">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="GUID" elementType="Argument">
            <stringProp name="Argument.name">GUID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BPMSESSIONID" elementType="Argument">
            <stringProp name="Argument.name">BPMSESSIONID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ASPXAUTH" elementType="Argument">
            <stringProp name="Argument.name">ASPXAUTH</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token" elementType="Argument">
            <stringProp name="Argument.name">Token</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BPMCSRF" elementType="Argument">
            <stringProp name="Argument.name">BPMCSRF</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Contact1FullJobTitle" elementType="Argument">
            <stringProp name="Argument.name">Contact1FullJobTitle</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberActivity" elementType="Argument">
            <stringProp name="Argument.name">NumberActivity</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TimeNow" elementType="Argument">
            <stringProp name="Argument.name">TimeNow</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ActivityCategoryId" elementType="Argument">
            <stringProp name="Argument.name">ActivityCategoryId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DirveActivityCategoryId" elementType="Argument">
            <stringProp name="Argument.name">DirveActivityCategoryId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthorID" elementType="Argument">
            <stringProp name="Argument.name">AuthorID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TitleName" elementType="Argument">
            <stringProp name="Argument.name">TitleName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DetaileResult" elementType="Argument">
            <stringProp name="Argument.name">DetaileResult</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SsoSessionId" elementType="Argument">
            <stringProp name="Argument.name">SsoSessionId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler">
          <stringProp name="BeanShellSampler.query">String uuid = java.util.UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);

vars.put(&quot;GUID&quot;, uuid);
vars.put(&quot;DriverLicenceNumber&quot;, &quot;${__Random(1000000000,9999999999)}&quot;);
vars.put(&quot;TimeNow&quot;, &quot;${__time(yyyy-MM-dd,)}&quot;);
vars.put(&quot;TimeEnd&quot;, &quot;${__RandomDate(yyyy-MM-dd,,2024-12-01,,)}&quot;);
vars.put(&quot;BirthDate&quot;, &quot;${__RandomDate(yyyy-MM-dd,1980-12-01,2005-12-01,)}&quot;);
vars.put(&quot;DateOfIssuance&quot;, &quot;${__RandomDate(yyyy-MM-dd,2012-12-01,2022-12-01,)}&quot;);
vars.put(&quot;ManufacturingYear&quot;, &quot;${__Random(2015,2022)}&quot;);
vars.put(&quot;PhoneNumber&quot;, &quot;${__Random(100000000,999999999)}&quot;);
vars.put(&quot;call_id_from_pbx&quot;, &quot;${__Random(10000000,99999999)}&quot;);
vars.put(&quot;Plate&quot;, &quot;${__Random(1000,9999)}&quot;);
vars.put(&quot;sts&quot;, &quot;${__Random(1000,9999)}&quot;);
vars.put(&quot;1stLetter&quot;, &quot;${__RandomString(1,BDFGJKLMNRPTSW)}&quot;);
vars.put(&quot;2ndtLetter&quot;, &quot;${__RandomString(1,aeio)}&quot;);</stringProp>
        </BeanShellSampler>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login query" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/ServiceModel/AuthService.svc/Login</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;UserName&quot;:&quot;${login}&quot;,&quot;UserPassword&quot;:&quot;q1w2e3r4t5y6u7i8o9p0&quot;,&quot;TimeZoneOffset&quot;:-600}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">ASPXAUTH</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: .ASPXAUTH=(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">BPMCSRF</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: BPMCSRF=(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">Token</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: CsrfToken=(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">SsoSessionId</stringProp>
              <stringProp name="RegexExtractor.regex">set-cookie: SsoSessionId=(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get BPMSESSIONID" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/Nui/ViewModule.aspx</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">true</stringProp>
              <stringProp name="RegexExtractor.refname">BPMSESSIONID</stringProp>
              <stringProp name="RegexExtractor.regex">Set-Cookie: BPMSESSIONID=(.+?);</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
            </RegexExtractor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">https://stress.yacrm.taxi.tst.yandex.net</stringProp>
                </elementProp>
                <elementProp name="referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stress.yacrm.taxi.tst.yandex.net/Nui/ViewModule.aspx</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Person and Conversation" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/DataService/json/SyncReply/SelectQuery</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;rootSchemaName&quot;: &quot;Call&quot;,&#xd;
    &quot;operationType&quot;: 0,&#xd;
    &quot;includeProcessExecutionData&quot;: true,&#xd;
    &quot;filters&quot;: {&#xd;
        &quot;items&quot;: {&#xd;
            &quot;primaryColumnFilter&quot;: {&#xd;
                &quot;filterType&quot;: 1,&#xd;
                &quot;comparisonType&quot;: 3,&#xd;
                &quot;isEnabled&quot;: true,&#xd;
                &quot;trimDateTimeParameterToDate&quot;: false,&#xd;
                &quot;leftExpression&quot;: {&#xd;
                    &quot;expressionType&quot;: 1,&#xd;
                    &quot;functionType&quot;: 1,&#xd;
                    &quot;macrosType&quot;: 34&#xd;
                },&#xd;
                &quot;rightExpression&quot;: {&#xd;
                    &quot;expressionType&quot;: 2,&#xd;
                    &quot;parameter&quot;: {&#xd;
                        &quot;dataValueType&quot;: 0,&#xd;
                        &quot;value&quot;: &quot;${call_id}&quot;&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        },&#xd;
        &quot;logicalOperation&quot;: 0,&#xd;
        &quot;isEnabled&quot;: true,&#xd;
        &quot;filterType&quot;: 6&#xd;
    },&#xd;
    &quot;columns&quot;: {&#xd;
        &quot;items&quot;: {&#xd;
            &quot;Id&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Id&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;CreatedOn&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;CreatedOn&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;CreatedBy&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;CreatedBy&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;ModifiedOn&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;ModifiedOn&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;ModifiedBy&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;ModifiedBy&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;IntegrationId&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;IntegrationId&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;ParentCallId&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;ParentCallId&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;CallerId&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;CallerId&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;CalledId&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;CalledId&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;RedirectingId&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;RedirectingId&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;RedirectionId&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;RedirectionId&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;StartDate&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;StartDate&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;EndDate&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;EndDate&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Duration&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Duration&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;BeforeConnectionTime&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;BeforeConnectionTime&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;TalkTime&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;TalkTime&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;HoldTime&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;HoldTime&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;ProcessListeners&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;ProcessListeners&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Direction&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Direction&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Caption&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Caption&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Contact&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Contact&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Account&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Account&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Result&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Result&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Comment&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Comment&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Notes&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Notes&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Activity&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Activity&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Case&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Case&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;GloballyUniqueCallLinkageId&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;GloballyUniqueCallLinkageId&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmTelephony&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmTelephony&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmOwner&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmOwner&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmCallCenterType&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmCallCenterType&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmCallId&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmCallId&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmPhone&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmPhone&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmPerson&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmPerson&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmClient&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmClient&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmTalk&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmTalk&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmPhoneAgent&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmPhoneAgent&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmCallTimePost&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmCallTimePost&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmStatus&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmStatus&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmExternalCode&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmExternalCode&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmExternalCodeSpace&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmExternalCodeSpace&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;PmBDDMType&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;PmBDDMType&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;Activity.Type&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 0,&#xd;
                    &quot;columnPath&quot;: &quot;Activity.Type&quot;&#xd;
                }&#xd;
            },&#xd;
            &quot;EntryPointsCount&quot;: {&#xd;
                &quot;caption&quot;: &quot;&quot;,&#xd;
                &quot;orderDirection&quot;: 0,&#xd;
                &quot;orderPosition&quot;: -1,&#xd;
                &quot;isVisible&quot;: true,&#xd;
                &quot;expression&quot;: {&#xd;
                    &quot;expressionType&quot;: 3,&#xd;
                    &quot;aggregationType&quot;: 1,&#xd;
                    &quot;columnPath&quot;: &quot;[EntryPoint:EntityId].Id&quot;,&#xd;
                    &quot;subFilters&quot;: {&#xd;
                        &quot;items&quot;: {&#xd;
                            &quot;cb2f1f9c-4f97-43d9-8a96-2aeacb96cccc&quot;: {&#xd;
                                &quot;filterType&quot;: 1,&#xd;
                                &quot;comparisonType&quot;: 3,&#xd;
                                &quot;isEnabled&quot;: true,&#xd;
                                &quot;trimDateTimeParameterToDate&quot;: false,&#xd;
                                &quot;leftExpression&quot;: {&#xd;
                                    &quot;expressionType&quot;: 0,&#xd;
                                    &quot;columnPath&quot;: &quot;IsActive&quot;&#xd;
                                },&#xd;
                                &quot;rightExpression&quot;: {&#xd;
                                    &quot;expressionType&quot;: 2,&#xd;
                                    &quot;parameter&quot;: {&#xd;
                                        &quot;dataValueType&quot;: 1,&#xd;
                                        &quot;value&quot;: true&#xd;
                                    }&#xd;
                                }&#xd;
                            }&#xd;
                        },&#xd;
                        &quot;logicalOperation&quot;: 0,&#xd;
                        &quot;isEnabled&quot;: true,&#xd;
                        &quot;filterType&quot;: 6&#xd;
                    }&#xd;
                }&#xd;
            }&#xd;
        }&#xd;
    },&#xd;
    &quot;isDistinct&quot;: false,&#xd;
    &quot;rowCount&quot;: -1,&#xd;
    &quot;rowsOffset&quot;: -1,&#xd;
    &quot;isPageable&quot;: false,&#xd;
    &quot;allColumns&quot;: false,&#xd;
    &quot;useLocalization&quot;: true,&#xd;
    &quot;useRecordDeactivation&quot;: false,&#xd;
    &quot;serverESQCacheParameters&quot;: {&#xd;
        &quot;cacheLevel&quot;: 0,&#xd;
        &quot;cacheGroup&quot;: &quot;&quot;,&#xd;
        &quot;cacheItemName&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;queryOptimize&quot;: false,&#xd;
    &quot;useMetrics&quot;: false,&#xd;
    &quot;adminUnitRoleSources&quot;: 0,&#xd;
    &quot;querySource&quot;: 0,&#xd;
    &quot;ignoreDisplayValues&quot;: false,&#xd;
    &quot;isHierarchical&quot;: false&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">PmTalk</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.rows[0].PmTalk.value</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">PmPerson</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.rows[0].PmPerson.value</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 2 (step_flow1)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_flow1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_flow1 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_flow1&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 2" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step_flow1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step1 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_flow1&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tel. Flow for the agent. Incoming call - Экран 2. Были ли Вы раньше зарегистрированы с другим номером телефона?" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPerson&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Lead&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Invoice&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Opportunity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Order&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Project&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contract&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Document&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Event&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;YesButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_flow1}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 3" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step2 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step2&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 3" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step2 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step2&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tel. Flow for the agent. Incoming call - Экран 3. Ввод номера телефона" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmBirthDate&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmStatusAV&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPerson&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmClient&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Lead&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Invoice&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Opportunity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Order&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Project&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contract&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Document&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Event&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmAge&quot;,&#xd;
            &quot;value&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PhoneNumber&quot;,&#xd;
            &quot;value&quot;: &quot;${PmPhoneNumber}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;NextButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step2}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 4" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step3</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step3 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step3&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetScreen4" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step3</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step3 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step3&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tel. Flow for the agent. Incoming call - Экран 4. Выберите необходимую запись из списка" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ChosenClient&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ChosenPerson&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Lead&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Invoice&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Opportunity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Order&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Project&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contract&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Document&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Event&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ClientsIdentifiersString&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PersonsIdentifiersString&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;SaveData&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step3}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 5" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step4</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step4 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step4&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetScreen5" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step4</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step4 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step4&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tel. Flow for the agent. Incoming call - Экран 5. Закрыть обращение в связи с ошибочным звонком?" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmBirthDate&quot;,&#xd;
            &quot;value&quot;: &quot;\&quot;${BirthDate}T00:00:00.000\&quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmStatusAV&quot;,&#xd;
            &quot;value&quot;: &quot;9eac5b04-e9cb-4cdc-be41-0c1410b0fba0&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmInterest&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPerson&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmClient&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: &quot;${PmTalk}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Lead&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Invoice&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Opportunity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Order&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Project&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contract&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Document&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Event&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmAge&quot;,&#xd;
            &quot;value&quot;: ${Age}&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;IsVideoCall&quot;,&#xd;
            &quot;value&quot;: false&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;LeadsIdentifiersString&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;ClosePage&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step4}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 6" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step5</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step5 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step5&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetScreen6" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step5</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step5 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step5&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tel. Flow for the agent. Incoming call - Экран 6. Выберите тематику вопроса" enabled="true">
          <stringProp name="TestPlan.comments">Экран 6. Выберите тематику вопроса</stringProp>
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmBirthDate&quot;,&#xd;
            &quot;value&quot;: &quot;\&quot;${BirthDate}T00:00:00.000\&quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalkQuestionCategory&quot;,&#xd;
            &quot;value&quot;: &quot;ff1af20b-3508-4d9f-86df-60389a8898a6&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmStatusAV&quot;,&#xd;
            &quot;value&quot;: &quot;9eac5b04-e9cb-4cdc-be41-0c1410b0fba0&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalkQuestionTopic&quot;,&#xd;
            &quot;value&quot;: &quot;1f5080aa-5fe1-4828-b08b-910bdb03fdc9&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmClient&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPerson&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: &quot;${PmTalk}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Lead&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Invoice&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Opportunity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Order&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Project&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contract&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Document&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Event&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmAge&quot;,&#xd;
            &quot;value&quot;: ${Age}&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;SaveData&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step5}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 7 (step_diag1)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_diag1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag1 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag1&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetScreen7 (step_diag1)" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step_diag1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag1 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag1&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Diagnostic flow in CCS - Экран 7: Уведомление о ранее созданном Запросе" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;ContinueButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_diag1}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 9 (step_diag2)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_diag2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag2 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag2&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetStepDiag2" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step_diag2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag2 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag2&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Diagnostic flow in CCS - Экран 9: Представление списка версий устройств клиенту" enabled="true">
          <stringProp name="TestPlan.comments">
</stringProp>
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmBirthDate&quot;,&#xd;
            &quot;value&quot;: &quot;\&quot;${BirthDate}T00:00:00.000\&quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmStatusAV&quot;,&#xd;
            &quot;value&quot;: &quot;9eac5b04-e9cb-4cdc-be41-0c1410b0fba0&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Pmclient1&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPerson&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeviceVersion&quot;,&#xd;
            &quot;value&quot;: &quot;82dfed08-a81d-4683-9daa-07aa01459287&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Lead&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Invoice&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Opportunity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Order&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Project&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contract&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Document&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Event&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmAge&quot;,&#xd;
            &quot;value&quot;: ${Age}&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;ContinueButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_diag2}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 12 (step_diag3)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_diag3</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag3 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag3&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetScreen12" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step_diag3</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag3 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag3&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Diagnostic flow in CCS - Экран 12: Опрос (диагностики)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmSurveyTemplate&quot;,&#xd;
            &quot;value&quot;: &quot;b2a70da5-be06-4252-b9fd-a4c8c4a00cd6&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Pmclient1&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmSurveyResultJson&quot;,&#xd;
            &quot;value&quot;: &quot;{\&quot;holder\&quot;:\&quot;108\&quot;,\&quot;charger\&quot;:\&quot;108\&quot;,\&quot;comment\&quot;:\&quot;Поломка появляется 1 раз в XX сеансов\&quot;}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;ContinueButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_diag3}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="start survey" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/0/rest/survey/templates/b2a70da5-be06-4252-b9fd-a4c8c4a00cd6/start</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">survey_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.SurveyId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save survey" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/0/rest/survey/surveys/${survey_id}/save</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;result&quot;:&quot;{\&quot;holder\&quot;:\&quot;108\&quot;,\&quot;charger\&quot;:\&quot;108\&quot;,\&quot;comment\&quot;:\&quot;Поломка появляется 1 раз в XX сеансов \&quot;}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">survey_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.SurveyId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 14 (step_diag4)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_diag4</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag4 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag4&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetScreen14" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step_diag4</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag4 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag4&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Diagnostic flow in CCS - Экран 14: Результат диагностики (Отрицательный)" enabled="true">
          <stringProp name="TestPlan.comments">
</stringProp>
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;ContinueButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_diag4}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 16 (step_diag5) - Вход 1" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_diag5</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag5 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag5&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetScreen16" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step_diag5</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag5 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag5&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Diagnostic flow in CCS - Экран 16: Ввод серийных номеров (диагностика)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmHolderSerialNumber&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmChargerSerialNumber&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeviceVersion&quot;,&#xd;
            &quot;value&quot;: &quot;82dfed08-a81d-4683-9daa-07aa01459287&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPmclient1&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Lead&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Invoice&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Opportunity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Order&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Project&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contract&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Document&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Event&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;IsNoStock&quot;,&#xd;
            &quot;value&quot;: true&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeviceTypeCode&quot;,&#xd;
            &quot;value&quot;: &quot;Set&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;LinkDeviceButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_diag5}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_link1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.executionData[1]..procElUId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tel. Device linking / relinking - Выбор устройств" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmClientId&quot;,&#xd;
            &quot;value&quot;: &quot;464b05c3-bccd-4f48-9b22-f021400210fc&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmHolderId&quot;,&#xd;
            &quot;value&quot;: &quot;${holder_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmChargerId&quot;,&#xd;
            &quot;value&quot;: &quot;${charger_id}&quot;&#xd;
        }, &#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;PmLinkButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_link1}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_tr1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.executionData[1]..procElUId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tel. Transaction date validation - Ввод даты транзакции" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTransactionDate&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmHolderDeviceId&quot;,&#xd;
            &quot;value&quot;: &quot;${holder_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmChargerDeviceId&quot;,&#xd;
            &quot;value&quot;: &quot;${charger_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmIsPurchaseDateUnknown&quot;,&#xd;
            &quot;value&quot;: true&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;PmNextButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_tr1}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_link2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.executionData[1]..procElUId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tel. Device linking / relinking - Устройства успешно привязаны" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmClientId&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmHolderDeviceId&quot;,&#xd;
            &quot;value&quot;: &quot;${holder_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmChargerDeviceId&quot;,&#xd;
            &quot;value&quot;: &quot;${charger_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;NextButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_link2}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_diag6</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.executionData[1]..procElUId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag6 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag6&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 16 (step_diag6) - Вход 2" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step_diag6</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_diag6 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_diag6&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Diagnostic flow in CCS - Экран 16: Ввод серийных номеров (диагностика)" enabled="true">
          <stringProp name="TestPlan.comments">Экран 16: Ввод серийных номеров (диагностика)</stringProp>
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmHolderSerialNumber&quot;,&#xd;
            &quot;value&quot;: &quot;${holder_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmChargerSerialNumber&quot;,&#xd;
            &quot;value&quot;: &quot;${charger_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeviceVersion&quot;,&#xd;
            &quot;value&quot;: &quot;82dfed08-a81d-4683-9daa-07aa01459287&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPmclient1&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Lead&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Invoice&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Opportunity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Order&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Project&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contract&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Document&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Event&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;IsNoStock&quot;,&#xd;
            &quot;value&quot;: true&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeviceTypeCode&quot;,&#xd;
            &quot;value&quot;: &quot;Set&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;ContinueButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_diag6}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">step_diag7</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 18 (step_diag7)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_diag7</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Diagnostic flow in CCS - Экран 18: Список доступных предложений" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDiagnostic&quot;,&#xd;
            &quot;value&quot;: &quot;26c14485-e43b-4c2e-b0b6-1c03569015e6&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeviceVersion&quot;,&#xd;
            &quot;value&quot;: &quot;82dfed08-a81d-4683-9daa-07aa01459287&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmSelectedSolutionDetail&quot;,&#xd;
            &quot;value&quot;: &quot;d9e0ad65-45b8-4c42-85af-22e7e766a16e&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Pmclient1&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;ContinueButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_diag7}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 19 (step_re1)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_re1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_re1 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_re1&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 19 - Попытка 2" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step_re1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step18 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step18&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Replacement flow in CCS - Экран 19: Оформление доставки (виджет)" enabled="true">
          <stringProp name="TestPlan.comments">
</stringProp>
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;:&#xd;
    [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateProposedMinDatetime&quot;,&#xd;
            &quot;value&quot;: &quot;\&quot;2023-08-02T17:30:52\&quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateProposedMaxDatetime&quot;,&#xd;
            &quot;value&quot;: &quot;\&quot;2023-08-02T17:30:52\&quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateMaxDate&quot;,&#xd;
            &quot;value&quot;: &quot;\&quot;2023-08-02T17:30:52\&quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateMinDate&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateProposedDate&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateTargetShippingDate&quot;,&#xd;
            &quot;value&quot;: &quot;\&quot;2023-08-02T17:30:52\&quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmBirthDate&quot;,&#xd;
            &quot;value&quot;: &quot;\&quot;1979-03-01\&quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmReceiveTypeId&quot;,&#xd;
            &quot;value&quot;: &quot;2816a5ec-d7fc-411b-ac1e-dc6c020c9455&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmProduct&quot;,&#xd;
            &quot;value&quot;: &quot;b943ebf2-9f15-467d-b688-e6caa00b6b28&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmProductAlernative&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmStatusAV&quot;,&#xd;
            &quot;value&quot;: &quot;9eac5b04-e9cb-4cdc-be41-0c1410b0fba0&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmProcessDeliveryTypeId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmClientId&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;RoleId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Account&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contact&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Case&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ConfItem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Problem&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Change&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Release&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalk&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Lead&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Invoice&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Opportunity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Order&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Project&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Contract&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Document&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Event&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmFullName&quot;,&#xd;
            &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateMinStr&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateMaxStr&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateProposedStr&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDateTargetShippingStr&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmMethodLabel&quot;,&#xd;
            &quot;value&quot;: &quot;СДЭК ПВЗ&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeliveryPointAddress&quot;,&#xd;
            &quot;value&quot;: &quot;AddressLine value&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeliveryPointZipCode&quot;,&#xd;
            &quot;value&quot;: &quot;ZipCode value&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeliveryTimeZone&quot;,&#xd;
            &quot;value&quot;: &quot;UTC+03:00&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeliveryPointKLADR&quot;,&#xd;
            &quot;value&quot;: &quot;KLADR Value&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeliveryPointCity&quot;,&#xd;
            &quot;value&quot;: &quot;City value&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmDeliveryPointCountry&quot;,&#xd;
            &quot;value&quot;: &quot;Country value&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmProductBVCodeListString&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmAge&quot;,&#xd;
            &quot;value&quot;: 35&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmMethodCode&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmMethodShipping&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmRangeValue&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmMethodWarehouse&quot;,&#xd;
            &quot;value&quot;: &quot;MS303438&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPVZSelectedAddress&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPVZSelectedKladrId&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPVZSelectedNumber&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPVZSelectedCity&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmPVZSelectedPostalCode&quot;,&#xd;
            &quot;value&quot;: null&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;DaDataToken&quot;,&#xd;
            &quot;value&quot;: &quot;00000000000000000000000&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;ApiURL&quot;,&#xd;
            &quot;value&quot;: &quot;http://10.14.20.10:30066&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PointInfo&quot;,&#xd;
            &quot;value&quot;: &quot;https://storelocator.iqos.ru/admin/slp_points/map&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;BrandCodeNew&quot;,&#xd;
            &quot;value&quot;: &quot;BV003237&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;SaveOrderButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_re1}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 22 (step_re2)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_re2</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_re2 is null" enabled="true">
          <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_re2&quot;) == &quot;&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 22 - Попытка 2" enabled="true">
            <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">4</stringProp>
            </ConstantTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="accept-encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="accept-language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="bpmcsrf" elementType="Header">
                  <stringProp name="Header.name">BPMCSRF</stringProp>
                  <stringProp name="Header.value">${BPMCSRF}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="cookie" elementType="Header">
                  <stringProp name="Header.name">Cookie</stringProp>
                  <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
                </elementProp>
                <elementProp name="x-request-source" elementType="Header">
                  <stringProp name="Header.name">X-Request-Source</stringProp>
                  <stringProp name="Header.value">ajax-provider</stringProp>
                </elementProp>
                <elementProp name="x-requested-with" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">step_re2</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">50</stringProp>
            </GaussianRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="step_re2 is null" enabled="true">
            <stringProp name="IfController.condition">${__groovy(vars.get(&quot;step_re2&quot;) == &quot;&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="stop thread" enabled="true">
              <intProp name="ActionProcessor.action">3</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Replacement flow in CCS - Экран 22: Заказ замены создан" enabled="true">
          <stringProp name="TestPlan.comments">
</stringProp>
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmClientId&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmReplacementOrderCode&quot;,&#xd;
            &quot;value&quot;: &quot;RB-987654&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmReplacementOrderCodeSpace&quot;,&#xd;
            &quot;value&quot;: &quot;SNOW&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;NextButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_re2}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран 8 (step_re3)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_re3</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Replacement flow in CCS - Экран 8: Остались вопросы" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmBirthDate&quot;,&#xd;
            &quot;value&quot;: &quot;\&quot;${BirthDate}T00:00:00.000\&quot;&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmStatusAV&quot;,&#xd;
            &quot;value&quot;: &quot;9eac5b04-e9cb-4cdc-be41-0c1410b0fba0&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;Pmclient1&quot;,&#xd;
            &quot;value&quot;: &quot;${client_id}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmAge&quot;,&#xd;
            &quot;value&quot;: ${Age}&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;ButtonNo&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_re3}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Экран &quot;Выберите основной вопрос&quot; (step_re4)" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/rest/ProcessEngineService/GetProcessEntryPointsData</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;entitySchemaUId&quot;: &quot;2f81fa05-11ae-400d-8e07-5ef6a620d1ad&quot;,&#xd;
    &quot;entityId&quot;: &quot;${call_id}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">4</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">step_re4</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.GetProcessEntryPointsDataResult[*].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">50</stringProp>
          </GaussianRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RnR. Replacement flow in CCS - Экран &quot;Выберите основной вопрос&quot;" enabled="true">
          <stringProp name="HTTPSampler.domain">rrpcrm-preprod.pmru.local</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/ProcessEngineService.svc/CompleteExecuting</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;collectExecutionData&quot;: true,&#xd;
    &quot;parameterValues&quot;: [&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PmTalkId&quot;,&#xd;
            &quot;value&quot;: &quot;${PmTalk}&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;name&quot;: &quot;PressedButtonCode&quot;,&#xd;
            &quot;value&quot;: &quot;NextButton&quot;&#xd;
        }&#xd;
    ],&#xd;
    &quot;processElementUId&quot;: &quot;${step_re4}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">BPMCSRF</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; SsoSessionId=${SsoSessionId}; .ASPXAUTH=${ASPXAUTH}; BPMSESSIONID=${BPMSESSIONID}</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">X-Request-Source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
          <boolProp name="useGroupName">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="client" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/BPM/JMeter/apache-jmeter-6.0.0-SNAPSHOT/csv/clients.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">client_id,PmPhoneNumber,BirthDate,Age</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="charger" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/BPM/JMeter/apache-jmeter-6.0.0-SNAPSHOT/csv/charger.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">charger_id</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="holder" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/BPM/JMeter/apache-jmeter-6.0.0-SNAPSHOT/csv/holder.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">holder_id</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="calls" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/BPM/JMeter/apache-jmeter-6.0.0-SNAPSHOT/csv/calls.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">call_id</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="users" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">C:/BPM/JMeter/apache-jmeter-6.0.0-SNAPSHOT/csv/users.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">login,PhoneAgent</stringProp>
        </CSVDataSet>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
